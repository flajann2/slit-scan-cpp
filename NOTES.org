* Notes -- personal and "private"
  As usual, I make no promises about my notes 
  meaning anything to anyone but myself, nor being
  uptodate. Please see the README for the official
  documentation.

** Reasons
  For reasons, we have decided to implement Slit Scan
  in C++, and give it a nice GUI to boot.

  The GUI situation is wanting in Haskell, alas. I
  began this same effort as a CLI app, but then many
  would not have an easy go using it.

  So this will use GTK4 and gtkmm and all the lastest
  features of C++23.

** Math and logic transported from the Haskell version
   I still need to fix the math in the Haskell version,
   but I will do that in the C++ version instead. I think
   it will be a lot easier to do, because with the Haskell verison
   I had no way to see the results in realtime.

   Once I do, I may backport it to Haskell.
** Linear slit-scans (like in 2001), loop slit-scans (like with Dr. Who)
   I want to support both. For the loop slit-scans, I am thinking
   of allowing the loop to be specified by an SVG file. Or it could be
   hand-drawn. Anything is possible.
** Build issues
   + aura -S vtk
** The future
   + I am speculating as to what a 3D version of slit-scan would be like.
     it would definitely be very different from the traditional 2D approach.
     It is an unexplored area that I find tantalizing.
   + Once done and stable, I wish to launch a big marketing effort. Slit-scam
     will remain in Open Source for the time being. But I want everyone
     to know about it and start using it.
   + Blender integration seems to be to be the obvious next step. It should
     use the Blender UI. To that end, I should keep the math part seperate.
   + Header-only code? I will take that approach here, and should I do a callable
     library, it would be a simple matter of including the headers
     and wrapping an API around them.
** And now, for something completely different.
   + The example code is almost doint the slit scan
     the right way. It is doing it verticall, but
     I must also do it horzontally. As such, I need to
     compute all the slits and combine them in the end.
     
     The tricky bit is to compute the x coordinate to
     insert the slit, which will vary as we approach 
     the end of the gel.

     I thought of doing all the slit computations up-front, but that
     would be memory inneficient. So I will work out how to
     do it properly.
   + I have a working example in SSTest.cpp.
   + Pipelining of the scanning will be in threads,
     using GelQueue designed specifically for this.

** Issues with the returned objects from Builder
   Looks as though I need to do composition rather than
   subclassing. For composition I can do several widgets
   in a grouping class to handle all the logic. I need to
   think about this.
** GelItem rename to GelAsset
   + Since there is a ListItem, which has nothing to do with GelItem,
     I renamed it to GelAsset. Not perfect, but actually not far
     off the mark, either.
** Put image and video processing in its own thread
   and pump signals to the gui thread for display.
   If the gtkmm signal slot is thread safe, we'll use
   it.
** Piplining
   Not sure how this will work, but we have thread L producing scans
   for the left side of the image, and thread R producing scans for the
   R side of the image, and thread I to do the slit integration.
** GelQueue -- limits on queue size, blocking the producers
   In reality, we could have an issue with the queue growing too large and
   exhausting memory. We should set an upper limit on queue size and 
   do blocking for producers when that size is exceeded.
   
   Reworked it, in progress for the upper limit. I think we
   will need a seperate mutex for that, and then we must
   be wary of the deadly embrace. We will deal with this later, before
   we release the product.

** Settings and configurations
   + We have to decide how we make global setting visible to 
     all components that need them, as well as specific configrations
     for, say, individual gels. 
     + We have an EntryEditor class that will work
       on this.
   + For gels, we will always maintain the original unmodified
     -- usually -- and just apply operations as per configuration.
   + We need some sort of a time base for live mods.

** To Jupiter, and Beyond the Infinite
   I think I will work on the Gel configuration Gui first, then
   do the actual slit-scanning. The initial configuration will
   simply rotate the gel 90 degrees or flip it. Later on,
   I want to make it much more sophisticated.

** My God, it's full of stars...
   Today, we'd say it's full of galaxies. Or clusters. Or Cosmic webs...
** Builder
   + I have run into an issue where I get getting the same widgets
     when I need new ones. So I am going to create local copies of 
     Builder to nuke the problem.
** And now, to do the actual slit scanning
   + We shall start with doing it to the main Gel Selection screen.
     Then, an actual write to a video file.
   + MVP will be the actual video file creation. Then we shall release
     it to the AUR, and go for more features.
   + Once we polish everything, we will then go for marketing the
     crap out of slit-scan.
   + We will make strong use of CSS to make everything
     "look pretty." Using CSS in an application is a new one
     for me, but we'll go with it.
   + The slit-scan algorithm has already been worked out by myself
     in SSTest. But it needs finess and refining. The flow
     will obviously not be the same in the application.
   + The tick server will drive the generation of the video. Since
     it represents actual time stamps, to mark the beginning, we
     record the time at the beginning, then take the difference
     as time progresses, and based all animinations on the delta 
     time.
